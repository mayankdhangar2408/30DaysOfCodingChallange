Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

import java.util.ArrayList;
import java.util.List;

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(nums, new ArrayList<>(), result);
        return result;
    }

    private void backtrack(int[] nums, List<Integer> current, List<List<Integer>> result) {
        // Base case: If the current list size equals nums length, add it to the result
        if (current.size() == nums.length) {
            result.add(new ArrayList<>(current));
            return;
        }

        // Explore all numbers
        for (int num : nums) {
            if (!current.contains(num)) { // Only add if it's not already in the current list
                current.add(num);
                backtrack(nums, current, result);
                current.remove(current.size() - 1); // Undo the move
            }
        }
    }
}
