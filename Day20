You are given two strings start and target, both of length n. Each string consists only of the characters 'L', 'R', and '_' where:

The characters 'L' and 'R' represent pieces, where a piece 'L' can move to the left only if there is a blank space directly to its left, and a piece 'R' can move to the right only if there is a blank space directly to its right.
The character '_' represents a blank space that can be occupied by any of the 'L' or 'R' pieces.
Return true if it is possible to obtain the string target by moving the pieces of the string start any number of times. Otherwise, return false.

class Solution {
    public boolean canChange(String start, String target) {
        int n = start.length();
        int i = 0, j = 0;

        while (i < n || j < n) {
            // Move i to the next non-'_' in start
            while (i < n && start.charAt(i) == '_') i++;
            // Move j to the next non-'_' in target
            while (j < n && target.charAt(j) == '_') j++;

            // If one of the strings is exhausted while the other is not
            if (i == n || j == n) return i == j;

            // If the characters at i and j are different, return false
            if (start.charAt(i) != target.charAt(j)) return false;

            // Check if the movement respects the constraints:
            // 'L' can only move left or stay in the same position
            if (start.charAt(i) == 'L' && i < j) return false;

            // 'R' can only move right or stay in the same position
            if (start.charAt(i) == 'R' && i > j) return false;

            // Move to the next character
            i++;
            j++;
        }

        return true;
    }
}
