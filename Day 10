You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // Create a dummy node to start the resulting linked list
        ListNode dummyHead = new ListNode(0);
        ListNode current = dummyHead;
        int carry = 0;

        // Loop until both lists are fully traversed and no carry remains
        while (l1 != null || l2 != null || carry != 0) {
            int sum = carry; // Start with the carry from the previous step

            if (l1 != null) {
                sum += l1.val; // Add value from l1
                l1 = l1.next;  // Move to the next node in l1
            }
            if (l2 != null) {
                sum += l2.val; // Add value from l2
                l2 = l2.next;  // Move to the next node in l2
            }

            carry = sum / 10; // Compute carry for the next step
            current.next = new ListNode(sum % 10); // Create a new node with the current digit
            current = current.next; // Move to the next node in the result list
        }

        return dummyHead.next; // Return the next node of the dummy head as the result
    }
}
